// This file was generated by the Owl parsing tool.
// Make sure to #define OWL_PARSER_IMPLEMENTATION somewhere so the parser
// is compiled properly.  Just two lines are enough -- a typical parser.c might
// look like:
//
//   #define OWL_PARSER_IMPLEMENTATION
//   #include "parser.h"

#ifndef OWL_PARSER_H
#define OWL_PARSER_H

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>

// The owl_tree struct represents an entire parse tree.  Use the
// owl_tree_create_...() functions to create a tree, then call owl_tree_root()
// to get the root owl_ref.
struct owl_tree;

// Creates an owl_tree from a string.  The tree may directly reference pieces of
// the string -- you're responsible for keeping it around until
// owl_tree_destroy() is called.
struct owl_tree *owl_tree_create_from_string(const char *string);

// Creates an owl_tree by reading from a file.
struct owl_tree *owl_tree_create_from_file(FILE *file);

// Explicitly create a tree with particular options.
struct owl_tree_options {
    // Exactly one of string or file should be set.
    const char *string;
    FILE *file;
};
struct owl_tree *owl_tree_create_with_options(struct owl_tree_options options);

// Destroys an owl_tree, freeing its resources back to the system.
void owl_tree_destroy(struct owl_tree *);

// Prints a representation of the tree to standard output.
void owl_tree_print(struct owl_tree *);

// An owl_ref references a list of children in the parse tree.  Use the
// parsed_..._get() function corresponding to the element type to unpack the
// child into its appropriate parsed_... struct.
struct owl_ref {
    struct owl_tree *_tree;
    size_t _offset;
    uint32_t _type;
    bool empty;
};

// The owl_next function advances a ref to the next sibling element.
struct owl_ref owl_next(struct owl_ref);

// Tests two refs for equality.
bool owl_refs_equal(struct owl_ref a, struct owl_ref b);

// Returns the root owl_ref.
struct owl_ref owl_tree_root_ref(struct owl_tree *tree);

// As a shortcut, returns the parsed_module struct corresponding to the root ref.
struct parsed_module owl_tree_get_parsed_module(struct owl_tree *tree);

// The range of text corresponding to a tree element.
struct source_range {
    size_t start;
    size_t end;
};

enum owl_error {
    // No error -- everything's fine!
    ERROR_NONE,

    // The file passed to owl_tree_create_from_file was NULL.
    ERROR_INVALID_FILE,

    // The options passed to owl_tree_create_with_options weren't valid --
    // both file and string were specified at the same time or neither were.
    ERROR_INVALID_OPTIONS,

    // A piece of text couldn't be matched as a token.
    ERROR_INVALID_TOKEN,

    // The parser encountered an out-of-place token that doesn't fit the grammar.
    ERROR_UNEXPECTED_TOKEN,

    // The input is valid so far, but incomplete; more tokens could be added to
    // complete it.
    ERROR_MORE_INPUT_NEEDED,
};
// Returns an error code, or ERROR_NONE if there wasn't an error.
// The error_range parameter can be null.
enum owl_error owl_tree_get_error(struct owl_tree *tree, struct source_range *error_range);

enum parsed_type {
    PARSED_FUNC = 1,
    PARSED_KSTR,
    PARSED_KBOOL,
    PARSED_KINT8,
    PARSED_KNONE,
    PARSED_KINT16,
    PARSED_KINT32,
    PARSED_KINT64,
    PARSED_INST_MOV,
    PARSED_INST_RET,
    PARSED_INST_CALL,
    PARSED_ENTRY_POINT,
    PARSED_MODULE_NAME,
    PARSED_RVM_VERSION,
    PARSED_CONSTANT_POOL,
};

struct parsed_module {
    struct source_range range;
    struct owl_ref decls;
};

struct parsed_decls {
    struct source_range range;
    enum parsed_type type;
    struct owl_ref string;
    struct owl_ref constant_pool_decl;
    struct owl_ref registers;
    struct owl_ref label;
    struct owl_ref inst;
};

struct parsed_constant_pool_decl {
    struct source_range range;
    enum parsed_type type;
    struct owl_ref integer;
    struct owl_ref string;
};

struct parsed_registers {
    struct source_range range;
    struct owl_ref integer;
};

struct parsed_label {
    struct source_range range;
    struct owl_ref identifier;
};

struct parsed_inst {
    struct source_range range;
    enum parsed_type type;
    struct owl_ref reg;
    struct owl_ref reg_or_konst;
    struct owl_ref konst;
};

struct parsed_reg_or_konst {
    struct source_range range;
    struct owl_ref reg;
    struct owl_ref konst;
};

struct parsed_reg {
    struct source_range range;
    struct owl_ref integer;
};

struct parsed_konst {
    struct source_range range;
    struct owl_ref integer;
};

struct parsed_string {
    struct source_range range;
    const char *string;
    size_t length;
};

struct parsed_integer {
    struct source_range range;
    uint64_t integer;
};

struct parsed_identifier {
    struct source_range range;
    const char *identifier;
    size_t length;
};

struct parsed_module parsed_module_get(struct owl_ref);
struct parsed_decls parsed_decls_get(struct owl_ref);
struct parsed_constant_pool_decl parsed_constant_pool_decl_get(struct owl_ref);
struct parsed_registers parsed_registers_get(struct owl_ref);
struct parsed_label parsed_label_get(struct owl_ref);
struct parsed_inst parsed_inst_get(struct owl_ref);
struct parsed_reg_or_konst parsed_reg_or_konst_get(struct owl_ref);
struct parsed_reg parsed_reg_get(struct owl_ref);
struct parsed_konst parsed_konst_get(struct owl_ref);
struct parsed_string parsed_string_get(struct owl_ref);
struct parsed_integer parsed_integer_get(struct owl_ref);
struct parsed_identifier parsed_identifier_get(struct owl_ref);

#endif

#ifdef OWL_PARSER_IMPLEMENTATION
// Code implementing the parser.  This might get a bit messy!
#include <assert.h>
#include <inttypes.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#if defined(__clang__) || defined(__GNUC__)
#define OWL_DONT_INLINE __attribute__((noinline))
#else
#define OWL_DONT_INLINE
#endif

struct owl_tree {
    const char *string;
    bool owns_string;
    uint8_t *parse_tree;
    size_t parse_tree_size;
    size_t next_offset;
    enum owl_error error;
    struct source_range error_range;
    size_t root_offset;
    size_t next_string_token_offset;
    size_t next_integer_token_offset;
    size_t next_identifier_token_offset;
};
// Reserve 10 bytes for each entry (the maximum encoded size of a 64-bit value).
#define RESERVATION_AMOUNT 10
static inline uint64_t read_tree(size_t *offset, struct owl_tree *tree) {
    uint8_t *parse_tree = tree->parse_tree;
    size_t parse_tree_size = tree->parse_tree_size;
    size_t i = *offset;
    if (i + RESERVATION_AMOUNT >= parse_tree_size)
        return 0;
    uint64_t result = 0;
    int shift_amount = 0;
    while ((parse_tree[i] & 0x80) != 0 && shift_amount < 64) {
        result |= ((uint64_t)parse_tree[i] & 0x7f) << shift_amount;
        shift_amount += 7;
        i++;
    }
    result |= ((uint64_t)parse_tree[i] & 0x7f) << shift_amount;
    i++;
    *offset = i;
    return result;
}
static bool grow_tree(struct owl_tree *tree, size_t size)
{
    size_t n = tree->parse_tree_size;
    while (n < size || n < 4096)
        n = (n + 1) * 3 / 2;
    uint8_t *parse_tree = realloc(tree->parse_tree, n);
    if (!parse_tree)
        return false;
    tree->parse_tree_size = n;
    tree->parse_tree = parse_tree;
    return true;
}
static void write_tree(struct owl_tree *tree, uint64_t value)
{
    size_t reserved_size = tree->next_offset + RESERVATION_AMOUNT;
    if (tree->parse_tree_size <= reserved_size && !grow_tree(tree, reserved_size))
        abort();
    while (value >> 7 != 0) {
        tree->parse_tree[tree->next_offset++] = 0x80 | (value & 0x7f);
        value >>= 7;
    }
    tree->parse_tree[tree->next_offset++] = value & 0x7f;
}
struct parsed_module parsed_module_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 0) {
        return (struct parsed_module){
            .decls.empty = true,
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = start_location + read_tree(&offset, ref._tree);
    struct parsed_module result = {
        .range.start = start_location,
        .range.end = end_location,
    };
    result.decls._tree = ref._tree;
    result.decls._offset = read_tree(&offset, ref._tree);
    result.decls._type = 1;
    result.decls.empty = result.decls._offset == 0;
    return result;
}
struct parsed_decls parsed_decls_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 1) {
        return (struct parsed_decls){
            .string.empty = true,
            .constant_pool_decl.empty = true,
            .registers.empty = true,
            .label.empty = true,
            .inst.empty = true,
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = start_location + read_tree(&offset, ref._tree);
    struct parsed_decls result = {
        .range.start = start_location,
        .range.end = end_location,
        .type = (enum parsed_type)read_tree(&offset, ref._tree),
    };
    result.string._tree = ref._tree;
    result.string._offset = read_tree(&offset, ref._tree);
    result.string._type = 9;
    result.string.empty = result.string._offset == 0;
    result.constant_pool_decl._tree = ref._tree;
    result.constant_pool_decl._offset = read_tree(&offset, ref._tree);
    result.constant_pool_decl._type = 2;
    result.constant_pool_decl.empty = result.constant_pool_decl._offset == 0;
    result.registers._tree = ref._tree;
    result.registers._offset = read_tree(&offset, ref._tree);
    result.registers._type = 3;
    result.registers.empty = result.registers._offset == 0;
    result.label._tree = ref._tree;
    result.label._offset = read_tree(&offset, ref._tree);
    result.label._type = 4;
    result.label.empty = result.label._offset == 0;
    result.inst._tree = ref._tree;
    result.inst._offset = read_tree(&offset, ref._tree);
    result.inst._type = 5;
    result.inst.empty = result.inst._offset == 0;
    return result;
}
struct parsed_constant_pool_decl parsed_constant_pool_decl_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 2) {
        return (struct parsed_constant_pool_decl){
            .integer.empty = true,
            .string.empty = true,
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = start_location + read_tree(&offset, ref._tree);
    struct parsed_constant_pool_decl result = {
        .range.start = start_location,
        .range.end = end_location,
        .type = (enum parsed_type)read_tree(&offset, ref._tree),
    };
    result.integer._tree = ref._tree;
    result.integer._offset = read_tree(&offset, ref._tree);
    result.integer._type = 10;
    result.integer.empty = result.integer._offset == 0;
    result.string._tree = ref._tree;
    result.string._offset = read_tree(&offset, ref._tree);
    result.string._type = 9;
    result.string.empty = result.string._offset == 0;
    return result;
}
struct parsed_registers parsed_registers_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 3) {
        return (struct parsed_registers){
            .integer.empty = true,
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = start_location + read_tree(&offset, ref._tree);
    struct parsed_registers result = {
        .range.start = start_location,
        .range.end = end_location,
    };
    result.integer._tree = ref._tree;
    result.integer._offset = read_tree(&offset, ref._tree);
    result.integer._type = 10;
    result.integer.empty = result.integer._offset == 0;
    return result;
}
struct parsed_label parsed_label_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 4) {
        return (struct parsed_label){
            .identifier.empty = true,
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = start_location + read_tree(&offset, ref._tree);
    struct parsed_label result = {
        .range.start = start_location,
        .range.end = end_location,
    };
    result.identifier._tree = ref._tree;
    result.identifier._offset = read_tree(&offset, ref._tree);
    result.identifier._type = 11;
    result.identifier.empty = result.identifier._offset == 0;
    return result;
}
struct parsed_inst parsed_inst_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 5) {
        return (struct parsed_inst){
            .reg.empty = true,
            .reg_or_konst.empty = true,
            .konst.empty = true,
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = start_location + read_tree(&offset, ref._tree);
    struct parsed_inst result = {
        .range.start = start_location,
        .range.end = end_location,
        .type = (enum parsed_type)read_tree(&offset, ref._tree),
    };
    result.reg._tree = ref._tree;
    result.reg._offset = read_tree(&offset, ref._tree);
    result.reg._type = 7;
    result.reg.empty = result.reg._offset == 0;
    result.reg_or_konst._tree = ref._tree;
    result.reg_or_konst._offset = read_tree(&offset, ref._tree);
    result.reg_or_konst._type = 6;
    result.reg_or_konst.empty = result.reg_or_konst._offset == 0;
    result.konst._tree = ref._tree;
    result.konst._offset = read_tree(&offset, ref._tree);
    result.konst._type = 8;
    result.konst.empty = result.konst._offset == 0;
    return result;
}
struct parsed_reg_or_konst parsed_reg_or_konst_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 6) {
        return (struct parsed_reg_or_konst){
            .reg.empty = true,
            .konst.empty = true,
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = start_location + read_tree(&offset, ref._tree);
    struct parsed_reg_or_konst result = {
        .range.start = start_location,
        .range.end = end_location,
    };
    result.reg._tree = ref._tree;
    result.reg._offset = read_tree(&offset, ref._tree);
    result.reg._type = 7;
    result.reg.empty = result.reg._offset == 0;
    result.konst._tree = ref._tree;
    result.konst._offset = read_tree(&offset, ref._tree);
    result.konst._type = 8;
    result.konst.empty = result.konst._offset == 0;
    return result;
}
struct parsed_reg parsed_reg_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 7) {
        return (struct parsed_reg){
            .integer.empty = true,
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = start_location + read_tree(&offset, ref._tree);
    struct parsed_reg result = {
        .range.start = start_location,
        .range.end = end_location,
    };
    result.integer._tree = ref._tree;
    result.integer._offset = read_tree(&offset, ref._tree);
    result.integer._type = 10;
    result.integer.empty = result.integer._offset == 0;
    return result;
}
struct parsed_konst parsed_konst_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 8) {
        return (struct parsed_konst){
            .integer.empty = true,
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = start_location + read_tree(&offset, ref._tree);
    struct parsed_konst result = {
        .range.start = start_location,
        .range.end = end_location,
    };
    result.integer._tree = ref._tree;
    result.integer._offset = read_tree(&offset, ref._tree);
    result.integer._type = 10;
    result.integer.empty = result.integer._offset == 0;
    return result;
}
struct parsed_string parsed_string_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 9) {
        return (struct parsed_string){
            {0}
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t token_offset = read_tree(&offset, ref._tree);
    read_tree(&token_offset, ref._tree);
    size_t start_location = read_tree(&token_offset, ref._tree);
    size_t end_location = start_location + read_tree(&token_offset, ref._tree);
    size_t string_offset = read_tree(&token_offset, ref._tree);
    const char *string = string_offset ?
     (const char *)ref._tree->parse_tree + string_offset : ref._tree->string + start_location + 1;
    size_t string_length = string_offset ?
     read_tree(&token_offset, ref._tree) : end_location - start_location - 2;
    struct parsed_string result = {
        .range.start = start_location,
        .range.end = end_location,
        .string = string,
        .length = string_length,
    };
    return result;
}
struct parsed_integer parsed_integer_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 10) {
        return (struct parsed_integer){
            {0}
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t token_offset = read_tree(&offset, ref._tree);
    read_tree(&token_offset, ref._tree);
    size_t start_location = read_tree(&token_offset, ref._tree);
    size_t end_location = start_location + read_tree(&token_offset, ref._tree);
    struct parsed_integer result = {
        .range.start = start_location,
        .range.end = end_location,
        .integer = read_tree(&token_offset, ref._tree),
    };
    return result;
}
struct parsed_identifier parsed_identifier_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 11) {
        return (struct parsed_identifier){
            {0}
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t token_offset = read_tree(&offset, ref._tree);
    read_tree(&token_offset, ref._tree);
    size_t start_location = read_tree(&token_offset, ref._tree);
    size_t end_location = start_location + read_tree(&token_offset, ref._tree);
    struct parsed_identifier result = {
        .range.start = start_location,
        .range.end = end_location,
        .identifier = ref._tree->string + start_location,
        .length = end_location - start_location,
    };
    return result;
}
static size_t finish_node(uint32_t rule, uint32_t choice, size_t next_sibling, size_t *slots, size_t start_location, size_t end_location, void *info) {
    struct owl_tree *tree = info;
    size_t offset = tree->next_offset;
    write_tree(tree, next_sibling ? offset - next_sibling : 0);
    write_tree(tree, start_location);
    write_tree(tree, end_location - start_location);
    switch (rule) {
    case 0: {
        write_tree(tree, slots[0]);
        break;
    }
    case 1: {
        switch (choice) {
        case 0:
            write_tree(tree, PARSED_MODULE_NAME);
            break;
        case 1:
            write_tree(tree, PARSED_RVM_VERSION);
            break;
        case 2:
            write_tree(tree, PARSED_ENTRY_POINT);
            break;
        case 3:
            write_tree(tree, PARSED_CONSTANT_POOL);
            break;
        case 4:
            write_tree(tree, PARSED_FUNC);
            break;
        }
        write_tree(tree, slots[0]);
        write_tree(tree, slots[1]);
        write_tree(tree, slots[2]);
        write_tree(tree, slots[3]);
        write_tree(tree, slots[4]);
        break;
    }
    case 2: {
        switch (choice) {
        case 0:
            write_tree(tree, PARSED_KNONE);
            break;
        case 1:
            write_tree(tree, PARSED_KBOOL);
            break;
        case 2:
            write_tree(tree, PARSED_KINT8);
            break;
        case 3:
            write_tree(tree, PARSED_KINT16);
            break;
        case 4:
            write_tree(tree, PARSED_KINT32);
            break;
        case 5:
            write_tree(tree, PARSED_KINT64);
            break;
        case 6:
            write_tree(tree, PARSED_KSTR);
            break;
        }
        write_tree(tree, slots[0]);
        write_tree(tree, slots[1]);
        break;
    }
    case 3: {
        write_tree(tree, slots[0]);
        break;
    }
    case 4: {
        write_tree(tree, slots[0]);
        break;
    }
    case 5: {
        switch (choice) {
        case 0:
            write_tree(tree, PARSED_INST_MOV);
            break;
        case 1:
            write_tree(tree, PARSED_INST_CALL);
            break;
        case 2:
            write_tree(tree, PARSED_INST_RET);
            break;
        }
        write_tree(tree, slots[0]);
        write_tree(tree, slots[1]);
        write_tree(tree, slots[2]);
        break;
    }
    case 6: {
        write_tree(tree, slots[0]);
        write_tree(tree, slots[1]);
        break;
    }
    case 7: {
        write_tree(tree, slots[0]);
        break;
    }
    case 8: {
        write_tree(tree, slots[0]);
        break;
    }
    default:
        break;
    }
    return offset;
}
static size_t finish_token(uint32_t rule, size_t next_sibling, void *info) {
    struct owl_tree *tree = info;
    size_t offset = tree->next_offset;
    write_tree(tree, next_sibling ? offset - next_sibling : 0);
    switch (rule) {
    case 9: {
        size_t offset9 = tree->next_string_token_offset;
        if (offset9 == 0)
            abort();
        write_tree(tree, offset9);
        tree->next_string_token_offset = offset9;
        tree->next_string_token_offset -= read_tree(&offset9, tree);
        break;
    }
    case 10: {
        size_t offset10 = tree->next_integer_token_offset;
        if (offset10 == 0)
            abort();
        write_tree(tree, offset10);
        tree->next_integer_token_offset = offset10;
        tree->next_integer_token_offset -= read_tree(&offset10, tree);
        break;
    }
    case 11: {
        size_t offset11 = tree->next_identifier_token_offset;
        if (offset11 == 0)
            abort();
        write_tree(tree, offset11);
        tree->next_identifier_token_offset = offset11;
        tree->next_identifier_token_offset -= read_tree(&offset11, tree);
        break;
    }
    default:
        break;
    }
    return offset;
}
static void check_for_error(struct owl_tree *tree) {
    if (tree->error == ERROR_NONE)
        return;
    fprintf(stderr, "parse error: ");
    switch (tree->error) {
    case ERROR_INVALID_FILE:
        fprintf(stderr, "invalid file\n");
        break;
    case ERROR_INVALID_OPTIONS:
        fprintf(stderr, "invalid options\n");
        break;
    case ERROR_INVALID_TOKEN:
        fprintf(stderr, "invalid token '%.*s'\n", (int)(tree->error_range.end - tree->error_range.start), tree->string + tree->error_range.start);
        break;
    case ERROR_UNEXPECTED_TOKEN:
        fprintf(stderr, "unexpected token '%.*s'\n", (int)(tree->error_range.end - tree->error_range.start), tree->string + tree->error_range.start);
        break;
    case ERROR_MORE_INPUT_NEEDED:
        fprintf(stderr, "more input needed\n");
        break;
    default:
        break;
    }
    exit(-1);
}
static void parsed_module_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_decls_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_constant_pool_decl_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_registers_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_label_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_inst_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_reg_or_konst_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_reg_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_konst_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_string_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_integer_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_identifier_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_module_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    int i;
    while (!ref.empty) {
        struct parsed_module it = parsed_module_get(ref);
        for (i = 0; i < indent; ++i) printf("  ");
        printf("module");
        if (strcmp("module", slot_name))
            printf("@%s", slot_name);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_decls_print(tree, it.decls, "decls", indent + 1);
        ref = owl_next(ref);
    }
}
static void parsed_decls_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    int i;
    while (!ref.empty) {
        struct parsed_decls it = parsed_decls_get(ref);
        for (i = 0; i < indent; ++i) printf("  ");
        printf("decls");
        if (strcmp("decls", slot_name))
            printf("@%s", slot_name);
        switch (it.type) {
        case PARSED_MODULE_NAME:
            printf(" : MODULE_NAME");
            break;
        case PARSED_RVM_VERSION:
            printf(" : RVM_VERSION");
            break;
        case PARSED_ENTRY_POINT:
            printf(" : ENTRY_POINT");
            break;
        case PARSED_CONSTANT_POOL:
            printf(" : CONSTANT_POOL");
            break;
        case PARSED_FUNC:
            printf(" : FUNC");
            break;
        default:
            break;
        }
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_string_print(tree, it.string, "string", indent + 1);
        parsed_constant_pool_decl_print(tree, it.constant_pool_decl, "constant_pool_decl", indent + 1);
        parsed_registers_print(tree, it.registers, "registers", indent + 1);
        parsed_label_print(tree, it.label, "label", indent + 1);
        parsed_inst_print(tree, it.inst, "inst", indent + 1);
        ref = owl_next(ref);
    }
}
static void parsed_constant_pool_decl_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    int i;
    while (!ref.empty) {
        struct parsed_constant_pool_decl it = parsed_constant_pool_decl_get(ref);
        for (i = 0; i < indent; ++i) printf("  ");
        printf("constant_pool_decl");
        if (strcmp("constant_pool_decl", slot_name))
            printf("@%s", slot_name);
        switch (it.type) {
        case PARSED_KNONE:
            printf(" : KNONE");
            break;
        case PARSED_KBOOL:
            printf(" : KBOOL");
            break;
        case PARSED_KINT8:
            printf(" : KINT8");
            break;
        case PARSED_KINT16:
            printf(" : KINT16");
            break;
        case PARSED_KINT32:
            printf(" : KINT32");
            break;
        case PARSED_KINT64:
            printf(" : KINT64");
            break;
        case PARSED_KSTR:
            printf(" : KSTR");
            break;
        default:
            break;
        }
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_integer_print(tree, it.integer, "integer", indent + 1);
        parsed_string_print(tree, it.string, "string", indent + 1);
        ref = owl_next(ref);
    }
}
static void parsed_registers_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    int i;
    while (!ref.empty) {
        struct parsed_registers it = parsed_registers_get(ref);
        for (i = 0; i < indent; ++i) printf("  ");
        printf("registers");
        if (strcmp("registers", slot_name))
            printf("@%s", slot_name);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_integer_print(tree, it.integer, "integer", indent + 1);
        ref = owl_next(ref);
    }
}
static void parsed_label_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    int i;
    while (!ref.empty) {
        struct parsed_label it = parsed_label_get(ref);
        for (i = 0; i < indent; ++i) printf("  ");
        printf("label");
        if (strcmp("label", slot_name))
            printf("@%s", slot_name);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_identifier_print(tree, it.identifier, "identifier", indent + 1);
        ref = owl_next(ref);
    }
}
static void parsed_inst_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    int i;
    while (!ref.empty) {
        struct parsed_inst it = parsed_inst_get(ref);
        for (i = 0; i < indent; ++i) printf("  ");
        printf("inst");
        if (strcmp("inst", slot_name))
            printf("@%s", slot_name);
        switch (it.type) {
        case PARSED_INST_MOV:
            printf(" : INST_MOV");
            break;
        case PARSED_INST_CALL:
            printf(" : INST_CALL");
            break;
        case PARSED_INST_RET:
            printf(" : INST_RET");
            break;
        default:
            break;
        }
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_reg_print(tree, it.reg, "reg", indent + 1);
        parsed_reg_or_konst_print(tree, it.reg_or_konst, "reg_or_konst", indent + 1);
        parsed_konst_print(tree, it.konst, "konst", indent + 1);
        ref = owl_next(ref);
    }
}
static void parsed_reg_or_konst_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    int i;
    while (!ref.empty) {
        struct parsed_reg_or_konst it = parsed_reg_or_konst_get(ref);
        for (i = 0; i < indent; ++i) printf("  ");
        printf("reg_or_konst");
        if (strcmp("reg_or_konst", slot_name))
            printf("@%s", slot_name);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_reg_print(tree, it.reg, "reg", indent + 1);
        parsed_konst_print(tree, it.konst, "konst", indent + 1);
        ref = owl_next(ref);
    }
}
static void parsed_reg_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    int i;
    while (!ref.empty) {
        struct parsed_reg it = parsed_reg_get(ref);
        for (i = 0; i < indent; ++i) printf("  ");
        printf("reg");
        if (strcmp("reg", slot_name))
            printf("@%s", slot_name);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_integer_print(tree, it.integer, "integer", indent + 1);
        ref = owl_next(ref);
    }
}
static void parsed_konst_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    int i;
    while (!ref.empty) {
        struct parsed_konst it = parsed_konst_get(ref);
        for (i = 0; i < indent; ++i) printf("  ");
        printf("konst");
        if (strcmp("konst", slot_name))
            printf("@%s", slot_name);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_integer_print(tree, it.integer, "integer", indent + 1);
        ref = owl_next(ref);
    }
}
static void parsed_string_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    int i;
    while (!ref.empty) {
        struct parsed_string it = parsed_string_get(ref);
        for (i = 0; i < indent; ++i) printf("  ");
        printf("string");
        if (strcmp("string", slot_name))
            printf("@%s", slot_name);
        printf(" - %.*s", (int)it.length, it.string);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        ref = owl_next(ref);
    }
}
static void parsed_integer_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    int i;
    while (!ref.empty) {
        struct parsed_integer it = parsed_integer_get(ref);
        for (i = 0; i < indent; ++i) printf("  ");
        printf("integer");
        if (strcmp("integer", slot_name))
            printf("@%s", slot_name);
        printf(" - %" PRIu64, it.integer);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        ref = owl_next(ref);
    }
}
static void parsed_identifier_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    int i;
    while (!ref.empty) {
        struct parsed_identifier it = parsed_identifier_get(ref);
        for (i = 0; i < indent; ++i) printf("  ");
        printf("identifier");
        if (strcmp("identifier", slot_name))
            printf("@%s", slot_name);
        printf(" - %.*s", (int)it.length, it.identifier);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        ref = owl_next(ref);
    }
}
void owl_tree_print(struct owl_tree *tree) {
    check_for_error(tree);
    parsed_module_print(tree, owl_tree_root_ref(tree), "module", 0);
}
struct owl_ref owl_next(struct owl_ref ref) {
    if (ref.empty) return ref;
    size_t offset = ref._offset;
    size_t delta = read_tree(&ref._offset, ref._tree);
    return (struct owl_ref){
        ._tree = ref._tree,
        ._offset = offset - delta,
        ._type = ref._type,
        .empty = delta == 0,
    };
}
bool owl_refs_equal(struct owl_ref a, struct owl_ref b) {
    return a._tree == b._tree && a._offset == b._offset;
}
struct owl_ref owl_tree_root_ref(struct owl_tree *tree) {
    check_for_error(tree);
    return (struct owl_ref){
        ._tree = tree,
        ._offset = tree->root_offset,
        ._type = 0,
        .empty = tree->root_offset == 0,
    };
}
struct parsed_module owl_tree_get_parsed_module(struct owl_tree *tree) {
    check_for_error(tree);
    return parsed_module_get(owl_tree_root_ref(tree));
}
#define ESCAPE_CHAR(c, info) ((c) == 'b' ? '\b' : (c) == 'f' ? '\f' : (c) == 'n' ? '\n' : (c) == 'r' ? '\r' : (c) == 't' ? '\t' : (c))
#define IGNORE_TOKEN_WRITE(...)
#define IGNORE_TOKEN_READ(...) (0)
#define CUSTOM_TOKEN_DATA(...)
#define IF_IDENTIFIER_TOKEN(cond, ...) if (cond) __VA_ARGS__
#define INTEGER_TOKEN_DATA(name) uint64_t name
#define IF_INTEGER_TOKEN(cond, ...) if (cond) __VA_ARGS__
#define NUMBER_TOKEN_DATA(...)
#define IF_NUMBER_TOKEN(...) if (0) { /* no number tokens */  }
#define STRING_TOKEN_HAS_ESCAPES(name) bool name = false
#define IF_STRING_TOKEN(cond, ...) if (cond) __VA_ARGS__
static size_t read_whitespace(const char *text, void *info);
static size_t read_keyword_token(uint32_t *token, bool *end_token, const char *text, void *info);
static void write_string_token(size_t offset, size_t length, const char *string, size_t string_length, bool has_escapes, void *info) {
    struct owl_tree *tree = info;
    size_t string_offset = has_escapes ? (uint8_t *)string - tree->parse_tree : 0;
    size_t token_offset = tree->next_offset;
    write_tree(tree, token_offset - tree->next_string_token_offset);
    write_tree(tree, offset);
    write_tree(tree, length);
    if (string_offset) {
        write_tree(tree, string_offset);
        write_tree(tree, string_length);
    } else
        write_tree(tree, 0);
    tree->next_string_token_offset = token_offset;
}
static void write_integer_token(size_t offset, size_t length, uint64_t integer, void *info) {
    struct owl_tree *tree = info;
    size_t token_offset = tree->next_offset;
    write_tree(tree, token_offset - tree->next_integer_token_offset);
    write_tree(tree, offset);
    write_tree(tree, length);
    write_tree(tree, integer);
    tree->next_integer_token_offset = token_offset;
}
static void write_identifier_token(size_t offset, size_t length, void *info) {
    struct owl_tree *tree = info;
    size_t token_offset = tree->next_offset;
    write_tree(tree, token_offset - tree->next_identifier_token_offset);
    write_tree(tree, offset);
    write_tree(tree, length);
    tree->next_identifier_token_offset = token_offset;
}
static void *allocate_string_contents(size_t size, void *info) {
    struct owl_tree *tree = info;
    if (tree->next_offset + size > tree->parse_tree_size)
        grow_tree(tree, tree->next_offset + size);
    void *p = tree->parse_tree + tree->next_offset;
    tree->next_offset += size;
    return p;
}
struct owl_token_run {
    struct owl_token_run *prev;
    uint16_t number_of_tokens;
    uint16_t lengths_size;
    uint8_t lengths[4096 * 2];
    uint32_t tokens[4096];
    uint32_t states[4096];
};
struct owl_default_tokenizer {
    const char *text;
    size_t offset;
    size_t whitespace;
    uint32_t identifier_token;
    uint32_t number_token;
    uint32_t string_token;
    void *info;
};
static bool char_is_whitespace(char c) {
    switch (c) {
    case ' ':
    case '\t':
    case '\r':
    case '\n':
        return true;
    default:
        return false;
    }
}
static bool char_is_numeric(char c) {
    return c >= '0' && c <= '9';
}
static bool char_is_alphabetic(char c) {
    return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z');
}
static bool char_is_hexadecimal_alpha(char c) {
    return (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F');
}
static bool char_starts_identifier(char c) {
    return char_is_alphabetic(c) || c == '_';
}
static bool char_continues_identifier(char c, void *info) {
    if (true && c == '-') return true;
    return char_is_numeric(c) || char_starts_identifier(c);
}
static bool char_ends_identifier(char c) {
    return c != '-';
}
static bool encode_length(struct owl_token_run *run, uint16_t *lengths_size, size_t length) {
    uint8_t mark = 0;
    while (*lengths_size < sizeof(run->lengths)) {
        run->lengths[*lengths_size] = mark | (length & 0x7f);
        mark = 0x80;
        length >>= 7;
        (*lengths_size)++;
        if (length == 0) return true;
    }
    return false;
}
static bool encode_token_length(struct owl_token_run *run, uint16_t *lengths_size, size_t length, size_t whitespace) {
    uint16_t size = *lengths_size;
    if (encode_length(run, lengths_size, length) && encode_length(run, lengths_size, whitespace)) return true;
    *lengths_size = size;
    return false;
}
static size_t decode_length(struct owl_token_run *run, uint16_t *length_offset) {
    size_t length = 0;
    while (*length_offset < sizeof(run->lengths)) {
        size_t l = run->lengths[(*length_offset)--];
        length <<= 7;
        length += l & 0x7f;
        if (!(l & 0x80)) return length;
    }
    abort();
}
static size_t decode_token_length(struct owl_token_run *run, uint16_t *length_offset, size_t *string_offset) {
    size_t whitespace = decode_length(run, length_offset);
    size_t length = decode_length(run, length_offset);
    *string_offset -= whitespace + length;
    return length;
}
static bool OWL_DONT_INLINE owl_default_tokenizer_advance(struct owl_default_tokenizer *tokenizer, struct owl_token_run **previous_run) {
    struct owl_token_run *run = malloc(sizeof(struct owl_token_run));
    if (!run) return false;
    uint16_t number_of_tokens = 0;
    uint16_t lengths_size = 0;
    const char *text = tokenizer->text;
    size_t whitespace = tokenizer->whitespace;
    size_t offset = tokenizer->offset;
    while (number_of_tokens < 4096) {
        char c = text[offset];
        if (c == '\0') break;
        size_t whitespace_length = read_whitespace(text + offset, tokenizer->info);
        if (whitespace_length > 0) {
            whitespace += whitespace_length;
            offset += whitespace_length;
            continue;
        }
        uint32_t token = -1;
        CUSTOM_TOKEN_DATA(custom_data);
        uint64_t integer = 0;
        NUMBER_TOKEN_DATA(number);
        STRING_TOKEN_HAS_ESCAPES(has_escapes);
        bool is_token = false;
        bool end_token = false;
        bool custom_token = false;
        bool comment = false;
        bool custom_whitespace = false;
        size_t token_length = read_keyword_token(&token, &end_token, text + offset, tokenizer->info);
        if (token_length > 0) {
            is_token = true;
            if (token == 4294967295U) comment = true;
        }
        if (IGNORE_TOKEN_READ(&token, &token_length, text + offset, &custom_whitespace, &custom_data, tokenizer->info)) {
            is_token = true;
            custom_token = true;
            end_token = false;
            comment = false;
        }
        IF_INTEGER_TOKEN(char_is_numeric(c), {
            size_t integer_offset = offset;
            uint64_t base = 10;
            if (c == '0' && (text[offset + 1] == 'x' || text[offset + 1] == 'X') && (char_is_numeric(text[offset + 2]) || char_is_hexadecimal_alpha(text[integer_offset + 2]))) {
                integer_offset = offset + 2;
                base = 16;
            }
            integer = 0;
            bool overflow = false;
            while (char_is_numeric(text[integer_offset]) || (base == 16 && char_is_hexadecimal_alpha(text[integer_offset]))) {
                uint64_t last = integer;
                integer *= base;
                uint64_t ch = text[integer_offset];
                if (ch >= '0' && ch <= '9') integer += ch - '0';
                else if (ch >= 'a' && ch <= 'f') integer += ch - 'a' + 0xa;
                else if (ch >= 'A' && ch <= 'F') integer += ch - 'A' + 0xA;
                if (integer < last) {
                    overflow = true;
                    break;
                }
                integer_offset++;
            }
            if (!overflow && integer_offset - offset > token_length) {
                token_length = integer_offset - offset;
                is_token = true;
                end_token = false;
                comment = false;
                custom_whitespace = false;
                token = 27;
            }
        }
        ) IF_NUMBER_TOKEN(char_is_numeric(c) || (c == '.' && char_is_numeric(text[offset + 1])), {
            const char *start = (const char *)text + offset;
            char *rest = 0;
            number = strtod(start, &rest);
            if (rest > start && rest - start > token_length) {
                token_length = rest - start;
                is_token = true;
                end_token = false;
                comment = false;
                custom_whitespace = false;
                token = 4294967295U;
            }
        }
        ) else IF_STRING_TOKEN(c == '\'' || c == '"', {
            size_t string_offset = offset + 1;
            while (text[string_offset] != '\0') {
                if (text[string_offset] == c) {
                    token_length = string_offset + 1 - offset;
                    is_token = true;
                    end_token = false;
                    comment = false;
                    custom_whitespace = false;
                    token = 26;
                    break;
                }
                if (text[string_offset] == '\\') {
                    has_escapes = true;
                    string_offset++;
                    if (text[string_offset] == '\0') break;
                }
                string_offset++;
            }
        }
        ) else IF_IDENTIFIER_TOKEN(char_starts_identifier(c), {
            size_t identifier_offset = offset + 1;
            while (char_continues_identifier(text[identifier_offset], tokenizer->info)) identifier_offset++;
            while (!char_ends_identifier(text[identifier_offset - 1])) identifier_offset--;
            if (identifier_offset - offset > token_length) {
                token_length = identifier_offset - offset;
                is_token = true;
                end_token = false;
                comment = false;
                custom_whitespace = false;
                token = 28;
            }
        }
        ) if (custom_whitespace) {
            whitespace += token_length;
            offset += token_length;
            continue;
        }
        else if (comment) {
            while (text[offset] != '\0' && text[offset] != '\n') {
                whitespace++;
                offset++;
            }
            continue;
        }
        else if (!is_token || token == 4294967295U) {
            tokenizer->offset = offset;
            tokenizer->whitespace = whitespace;
            free(run);
            return false;
        }
        if (end_token && number_of_tokens + 1 >= 4096) break;
        if (!encode_token_length(run, &lengths_size, token_length, whitespace)) break;
        if (token == 28) {
            write_identifier_token(offset, token_length, tokenizer->info);
        }
        else if (token == 27) {
            write_integer_token(offset, token_length, integer, tokenizer->info);
        }
        else if (token == 4294967295U) {
            IGNORE_TOKEN_WRITE(offset, token_length, number, tokenizer->info);
        }
        else IF_STRING_TOKEN(token == 26, {
            size_t content_offset = offset + 1;
            size_t content_length = token_length - 2;
            const char *string = text + content_offset;
            size_t string_length = content_length;
            if (has_escapes) {
                size_t i;
                for (i = 0;
                i < content_length;
                ++i) {
                    if (text[content_offset + i] == '\\') {
                        string_length--;
                        i++;
                    }
                }
                char *unescaped = allocate_string_contents(string_length, tokenizer->info);
                size_t j = 0;
                for (i = 0;
                i < content_length;
                ++i) {
                    if (text[content_offset + i] == '\\') i++;
                    unescaped[j++] = ESCAPE_CHAR(text[content_offset + i], tokenizer->info);
                }
                string = unescaped;
            }
            write_string_token(offset, token_length, string, string_length, has_escapes, tokenizer->info);
        }
        ) else if (custom_token) {
            IGNORE_TOKEN_WRITE(offset, token_length, token, custom_data, tokenizer->info);
        }
        run->tokens[number_of_tokens] = token;
        whitespace = 0;
        number_of_tokens++;
        offset += token_length;
        if (end_token) {
            assert(number_of_tokens < 4096);
            run->tokens[number_of_tokens] = 4294967295U;
            number_of_tokens++;
        }
    }
    if (number_of_tokens == 0) {
        tokenizer->offset = offset;
        tokenizer->whitespace = whitespace;
        free(run);
        return false;
    }
    tokenizer->offset = offset;
    tokenizer->whitespace = whitespace;
    run->prev = *previous_run;
    run->number_of_tokens = number_of_tokens;
    run->lengths_size = lengths_size;
    *previous_run = run;
    return true;
}
static void find_token_range(struct owl_default_tokenizer *tokenizer, struct owl_token_run *run, uint16_t index, size_t *start, size_t *end) {
    size_t offset = tokenizer->offset - tokenizer->whitespace;
    size_t last_offset = offset;
    size_t len = 0;
    uint16_t length_offset = run->lengths_size - 1;
    uint16_t j;
    for (j = index;
    j < run->number_of_tokens;
    ++j) {
        if (run->tokens[j] == 4294967295U) continue;
        last_offset = offset;
        len = decode_token_length(run, &length_offset, &offset);
    }
    *start = last_offset - len;
    *end = last_offset;
}
static void estimate_next_token_range(struct owl_default_tokenizer *tokenizer, size_t *start, size_t *end) {
    *start = tokenizer->offset;
    size_t i = tokenizer->offset + 1;
    while (tokenizer->text[i] != '\0' && !char_is_whitespace(tokenizer->text[i]) && !char_continues_identifier(tokenizer->text[i], tokenizer->info)) i++;
    *end = i;
}
static void find_end_range(struct owl_default_tokenizer *tokenizer, size_t *start, size_t *end) {
    *start = tokenizer->offset - tokenizer->whitespace - 1;
    *end = tokenizer->offset - tokenizer->whitespace;
    if (*start > *end) {
        *start = *end;
        *end += 1;
    }
}
static uint32_t rule_lookup(uint32_t parent, uint32_t slot, void *context);
static void fixity_associativity_precedence_lookup(int *fixity_associativity, int *precedence, uint32_t rule, uint32_t choice, void *context);
static size_t number_of_slots_lookup(uint32_t rule, void *context);
static void left_right_operand_slots_lookup(uint32_t rule, uint32_t *left, uint32_t *right, uint32_t *operand, void *context);
enum construct_fixity_associativity {
CONSTRUCT_PREFIX, CONSTRUCT_POSTFIX, CONSTRUCT_INFIX_LEFT, CONSTRUCT_INFIX_RIGHT, CONSTRUCT_INFIX_FLAT, };
struct construct_node {
    struct construct_node *next;
    size_t number_of_slots;
    size_t *slots;
    uint32_t rule;
    uint16_t slot_index;
    uint16_t choice_index;
    enum construct_fixity_associativity fixity_associativity;
    int precedence;
    size_t start_location;
    size_t end_location;
};
struct construct_expression {
    struct construct_expression *parent;
    struct construct_node *first_operator;
    struct construct_node *first_value;
    uint32_t operand_slot_index;
    uint32_t left_slot_index;
    uint32_t right_slot_index;
    uint32_t rule;
    uint16_t slot_index;
};
enum construct_root_type {
CONSTRUCT_NORMAL_ROOT, CONSTRUCT_EXPRESSION_ROOT, };
struct construct_state {
    enum construct_root_type root_type;
    struct construct_node *under_construction;
    struct construct_expression *current_expression;
    struct construct_node *node_freelist;
    struct construct_expression *expression_freelist;
    void *info;
};
static struct construct_node *construct_node_alloc(struct construct_state *s, uint32_t rule) {
    struct construct_node *node;
    size_t number_of_slots = number_of_slots_lookup(rule, s->info);
    if (s->node_freelist) {
        node = s->node_freelist;
        s->node_freelist = node->next;
        size_t *slots = node->slots;
        if (number_of_slots > node->number_of_slots) {
            slots = realloc(slots, number_of_slots * sizeof(size_t));
            if (!slots) abort();
        }
        memset(node, 0, sizeof(struct construct_node));
        memset(slots, 0, number_of_slots * sizeof(size_t));
        node->slots = slots;
    }
    else {
        node = calloc(1, sizeof(struct construct_node));
        if (!node) abort();
        node->slots = calloc(number_of_slots, sizeof(size_t));
        if (number_of_slots > 0 && !node->slots) abort();
    }
    node->rule = rule;
    node->number_of_slots = number_of_slots;
    return node;
}
static struct construct_expression *construct_expression_alloc(struct construct_state *s, uint32_t rule) {
    struct construct_expression *expr;
    if (s->expression_freelist) {
        expr = s->expression_freelist;
        s->expression_freelist = expr->parent;
        memset(expr, 0, sizeof(struct construct_expression));
    }
    else {
        expr = calloc(1, sizeof(struct construct_expression));
        if (!expr) abort();
    }
    (left_right_operand_slots_lookup(rule, &(expr->left_slot_index), &(expr->right_slot_index), &(expr->operand_slot_index), s->info));
    expr->rule = rule;
    return expr;
}
static void construct_node_free(struct construct_state *state, struct construct_node *node) {
    node->next = state->node_freelist;
    state->node_freelist = node;
}
static void construct_expression_free(struct construct_state *state, struct construct_expression *expr) {
    expr->parent = state->expression_freelist;
    state->expression_freelist = expr;
}
static bool construct_expression_should_reduce(struct construct_state *s, struct construct_expression *expr, struct construct_node *node) {
    if (node->fixity_associativity == CONSTRUCT_POSTFIX) return false;
    struct construct_node *top = expr->first_operator;
    if (!top) return false;
    return node->precedence < top->precedence || (node->precedence == top->precedence && node->fixity_associativity == CONSTRUCT_INFIX_RIGHT);
}
static void construct_expression_reduce(struct construct_state *s, struct construct_expression *expr) {
    struct construct_node *op = expr->first_operator;
    if (op->fixity_associativity == CONSTRUCT_INFIX_FLAT) {
        struct construct_node *first_value = expr->first_value;
        struct construct_node *last_value = first_value;
        struct construct_node *last_operator = op;
        size_t operand = op->slots[expr->operand_slot_index];
        struct construct_node *combined_op = construct_node_alloc(s, op->rule);
        combined_op->choice_index = op->choice_index;
        combined_op->slot_index = op->slot_index;
        combined_op->fixity_associativity = op->fixity_associativity;
        combined_op->precedence = op->precedence;
        struct construct_node *reversed_values = 0;
        while (last_operator && last_operator->choice_index == op->choice_index) {
            struct construct_node *next_op = last_operator->next;
            construct_node_free(s, last_operator);
            last_operator = next_op;
            assert(last_value);
            struct construct_node *next_value = last_value->next;
            last_value->next = reversed_values;
            reversed_values = last_value;
            last_value = next_value;
        }
        combined_op->start_location = first_value->start_location;
        combined_op->end_location = last_value->end_location;
        assert(last_value);
        operand = (finish_node((last_value)->rule, (last_value)->choice_index, operand, (last_value)->slots, (last_value)->start_location, (last_value)->end_location, s->info));
        combined_op->next = last_value->next;
        construct_node_free(s, last_value);
        while (reversed_values) {
            operand = (finish_node((reversed_values)->rule, (reversed_values)->choice_index, operand, (reversed_values)->slots, (reversed_values)->start_location, (reversed_values)->end_location, s->info));
            struct construct_node *next_value = reversed_values->next;
            construct_node_free(s, reversed_values);
            reversed_values = next_value;
        }
        expr->first_operator = last_operator;
        expr->first_value = combined_op;
        combined_op->slots[expr->operand_slot_index] = operand;
    }
    else if (op->fixity_associativity == CONSTRUCT_INFIX_LEFT || op->fixity_associativity == CONSTRUCT_INFIX_RIGHT) {
        expr->first_operator = op->next;
        struct construct_node *left = expr->first_value;
        struct construct_node *right = left->next;
        op->next = right->next;
        expr->first_value = op;
        op->start_location = left->start_location;
        op->end_location = right->end_location;
        op->slots[expr->left_slot_index] = (finish_node((left)->rule, (left)->choice_index, op->slots[expr->left_slot_index], (left)->slots, (left)->start_location, (left)->end_location, s->info));
        op->slots[expr->right_slot_index] = (finish_node((right)->rule, (right)->choice_index, op->slots[expr->right_slot_index], (right)->slots, (right)->start_location, (right)->end_location, s->info));
        construct_node_free(s, left);
        construct_node_free(s, right);
    }
    else {
        expr->first_operator = op->next;
        struct construct_node *value = expr->first_value;
        op->next = value->next;
        expr->first_value = op;
        if (value->start_location < op->start_location) op->start_location = value->start_location;
        if (value->end_location > op->end_location) op->end_location = value->end_location;
        op->slots[expr->operand_slot_index] = (finish_node((value)->rule, (value)->choice_index, op->slots[expr->operand_slot_index], (value)->slots, (value)->start_location, (value)->end_location, s->info));
        construct_node_free(s, value);
    }
}
static void construct_begin(struct construct_state *s, size_t offset, enum construct_root_type type) {
    s->root_type = type;
    uint32_t r = 0;
    if (type == CONSTRUCT_EXPRESSION_ROOT) {
        struct construct_expression *expr = construct_expression_alloc(s, r);
        expr->parent = s->current_expression;
        s->current_expression = expr;
    }
    else {
        struct construct_node *node = construct_node_alloc(s, r);
        node->next = s->under_construction;
        node->end_location = offset;
        s->under_construction = node;
    }
}
static size_t construct_finish(struct construct_state *s, size_t offset) {
    size_t finished = 0;
    if (s->root_type == CONSTRUCT_EXPRESSION_ROOT) {
        struct construct_expression *expr = s->current_expression;
        s->current_expression = expr->parent;
        while (expr->first_operator) construct_expression_reduce(s, expr);
        struct construct_node *node = expr->first_value;
        if (node) {
            finished = (finish_node((node)->rule, (node)->choice_index, 0, (node)->slots, (node)->start_location, (node)->end_location, s->info));
            assert(node->next == 0);
            construct_node_free(s, node);
        }
        construct_expression_free(s, expr);
    }
    else {
        struct construct_node *node = s->under_construction;
        s->under_construction = node->next;
        node->start_location = offset;
        finished = (finish_node((node)->rule, (node)->choice_index, 0, (node)->slots, (node)->start_location, (node)->end_location, s->info));
        construct_node_free(s, node);
    }
    while (s->node_freelist) {
        struct construct_node *node = s->node_freelist;
        s->node_freelist = node->next;
        free(node->slots);
        free(node);
    }
    while (s->expression_freelist) {
        struct construct_expression *expr = s->expression_freelist;
        s->expression_freelist = expr->parent;
        free(expr);
    }
    return finished;
}
static void construct_action_apply(struct construct_state *s, uint16_t action, size_t offset) {
    switch ((((action) >> 12) & 0xf)) {
    case 8:
        {
            struct construct_node *node = construct_node_alloc(s, rule_lookup(s->under_construction->rule, ((action) & 0xfff), s->info));
            node->next = s->under_construction;
            node->slot_index = ((action) & 0xfff);
            node->end_location = offset;
            s->under_construction = node;
            break;
        }
    case 9:
        {
            struct construct_expression *expr = construct_expression_alloc(s, rule_lookup(s->under_construction->rule, ((action) & 0xfff), s->info));
            expr->parent = s->current_expression;
            s->current_expression = expr;
            expr->slot_index = ((action) & 0xfff);
            break;
        }
    case 1:
        {
            struct construct_node *node = s->under_construction;
            node->start_location = offset;
            s->under_construction = node->next;
            size_t *finished;
            finished = &s->under_construction->slots[node->slot_index];
            *finished = (finish_node((node)->rule, (node)->choice_index, *finished, (node)->slots, (node)->start_location, (node)->end_location, s->info));
            construct_node_free(s, node);
            break;
        }
    case 2:
        {
            struct construct_expression *expr = s->current_expression;
            s->current_expression = expr->parent;
            while (expr->first_operator) construct_expression_reduce(s, expr);
            size_t *finished;
            finished = &s->under_construction->slots[expr->slot_index];
            struct construct_node *node = expr->first_value;
            if (node) {
                *finished = (finish_node((node)->rule, (node)->choice_index, *finished, (node)->slots, (node)->start_location, (node)->end_location, s->info));
                assert(node->next == 0);
                construct_node_free(s, node);
            }
            construct_expression_free(s, expr);
            break;
        }
    case 3:
        s->under_construction->choice_index = ((action) & 0xfff);
        break;
    case 4:
        {
            uint16_t slot = ((action) & 0xfff);
            size_t *finished = &s->under_construction->slots[slot];
            *finished = finish_token(rule_lookup(s->under_construction->rule, slot, s->info), *finished, s->info);
            break;
        }
    case 10:
        {
            struct construct_expression *expr = s->current_expression;
            struct construct_node *node = construct_node_alloc(s, expr->rule);
            node->choice_index = ((action) & 0xfff);
            node->end_location = offset;
            node->rule = expr->rule;
            node->next = s->under_construction;
            s->under_construction = node;
            break;
        }
    case 11:
        {
            struct construct_expression *expr = s->current_expression;
            struct construct_node *node = construct_node_alloc(s, expr->rule);
            node->choice_index = ((action) & 0xfff);
            node->end_location = offset;
            node->rule = expr->rule;
            enum construct_fixity_associativity fixity_associativity = 0;
            int precedence = 0;
            do {
                int local = 0;
                fixity_associativity_precedence_lookup(&local, &precedence, expr->rule, ((action) & 0xfff), s->info);
                fixity_associativity = local;
            }
            while (0);
            node->fixity_associativity = fixity_associativity;
            node->precedence = precedence;
            node->next = s->under_construction;
            s->under_construction = node;
            break;
        }
    case 5:
        {
            struct construct_expression *expr = s->current_expression;
            struct construct_node *node = s->under_construction;
            node->start_location = offset;
            s->under_construction = node->next;
            node->next = expr->first_value;
            expr->first_value = node;
            break;
        }
    case 6:
        {
            struct construct_expression *expr = s->current_expression;
            struct construct_node *node = s->under_construction;
            node->start_location = offset;
            s->under_construction = node->next;
            while (construct_expression_should_reduce(s, expr, node)) construct_expression_reduce(s, expr);
            node->next = expr->first_operator;
            expr->first_operator = node;
            if (node->fixity_associativity == CONSTRUCT_PREFIX) construct_expression_reduce(s, expr);
            break;
        }
    }
}

struct fill_run_continuation;
struct fill_run_state {
    uint32_t state;
    uint32_t reachability_mask[1];
    struct fill_run_continuation *cont;
};
struct fill_run_continuation {
    struct fill_run_state *stack;
    size_t top_index;
    size_t capacity;
    int error;
};
static void bracket_entry_state(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index, uint32_t mask0);
static void (*state_funcs[53])(struct owl_token_run *, struct fill_run_state *, uint16_t);
static void state_func_6(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 4: top->state = 7; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_4(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 4: top->state = 26; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_7(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 16: top->state = 8; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_14(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 17: top->state = 15; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_17(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 19: top->state = 18; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_19(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 19: top->state = 20; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_22(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 19: top->state = 23; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_5(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 26: top->state = 6; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_34(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 26: top->state = 35; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_3(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 26: top->state = 41; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_2(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 26: top->state = 42; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_1(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 26: top->state = 43; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_8(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 27: top->state = 9; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_33(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 27: top->state = 36; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_32(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 27: top->state = 37; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_31(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 27: top->state = 38; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_30(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 27: top->state = 39; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_20(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 29: top->state = 21; return;
    default:
        bracket_entry_state(run, top, token_index, 1);
        return;
    }
}
static void state_func_11(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 29: top->state = 22; return;
    default:
        bracket_entry_state(run, top, token_index, 1);
        return;
    }
}
static void state_func_12(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 30: top->state = 17; return;
    default:
        bracket_entry_state(run, top, token_index, 2);
        return;
    }
}
static void state_func_18(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 30: top->state = 19; return;
    default:
        bracket_entry_state(run, top, token_index, 2);
        return;
    }
}
static void state_func_45(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(1 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 22: top->state = 50; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_46(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 22: top->state = 47; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_48(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 24: top->state = 49; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_47(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 27: top->state = 48; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_29(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 9: top->state = 40; return;
    case 10: top->state = 40; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_23(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 29: top->state = 24; return;
    case 30: top->state = 25; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_44(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(3 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 23: top->state = 45; return;
    case 25: top->state = 46; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_0(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 0: top->state = 1; return;
    case 1: top->state = 2; return;
    case 2: top->state = 3; return;
    case 3: top->state = 4; return;
    case 6: top->state = 5; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_9(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 5: top->state = 10; return;
    case 18: top->state = 11; return;
    case 20: top->state = 12; return;
    case 21: top->state = 13; return;
    case 28: top->state = 14; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_13(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 5: top->state = 10; return;
    case 18: top->state = 11; return;
    case 20: top->state = 12; return;
    case 21: top->state = 13; return;
    case 28: top->state = 14; return;
    case 29: top->state = 16; return;
    default:
        bracket_entry_state(run, top, token_index, 1);
        return;
    }
}
static void state_func_26(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 5: top->state = 27; return;
    case 7: top->state = 28; return;
    case 8: top->state = 29; return;
    case 11: top->state = 30; return;
    case 12: top->state = 31; return;
    case 13: top->state = 32; return;
    case 14: top->state = 33; return;
    case 15: top->state = 34; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_49(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    if (top->cont->top_index == 0) {
        top->cont->error = 1;
        return;
    }
    top->cont->top_index--;
    top--;
    run->tokens[token_index] = 30;
    run->states[token_index] = top->state;
    state_funcs[top->state](run, top, token_index);
    return;
}
static void state_func_51(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(1 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 24: top->state = 52; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_50(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(1 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 27: top->state = 51; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_52(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(1 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    if (top->cont->top_index == 0) {
        top->cont->error = 1;
        return;
    }
    top->cont->top_index--;
    top--;
    run->tokens[token_index] = 29;
    run->states[token_index] = top->state;
    state_funcs[top->state](run, top, token_index);
    return;
}
static void (*state_funcs[53])(struct owl_token_run *, struct fill_run_state *, uint16_t) = {
    state_func_0, state_func_1, state_func_2, state_func_3,
    state_func_4, state_func_5, state_func_6, state_func_7,
    state_func_8, state_func_9, state_func_0, state_func_11,
    state_func_12, state_func_13, state_func_14, state_func_9,
    state_func_9, state_func_17, state_func_18, state_func_19,
    state_func_20, state_func_9, state_func_22, state_func_23,
    state_func_9, state_func_9, state_func_26, state_func_0,
    state_func_26, state_func_29, state_func_30, state_func_31,
    state_func_32, state_func_33, state_func_34, state_func_26,
    state_func_26, state_func_26, state_func_26, state_func_26,
    state_func_26, state_func_0, state_func_0, state_func_0,
    state_func_44, state_func_45, state_func_46, state_func_47,
    state_func_48, state_func_49, state_func_50, state_func_51,
    state_func_52,};
static void bracket_entry_state(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index, uint32_t mask0) {
    struct fill_run_continuation *cont = top->cont;
    cont->top_index++;
    if (cont->top_index >= cont->capacity) {
        size_t new_capacity = (cont->capacity + 2) * 3 / 2;
        if (new_capacity <= cont->capacity)
            abort();
        struct fill_run_state *new_states = realloc(cont->stack, new_capacity * sizeof(struct fill_run_state));
        if (!new_states)
            abort();
        cont->stack = new_states;
        cont->capacity = new_capacity;
        top = &cont->stack[cont->top_index];
    } else
        top++;
    top->cont = cont;
    top->reachability_mask[0] = mask0;
    run->states[token_index] = 44;
    state_func_44(run, top, token_index);
    if (top->cont->error == -1)
        top->cont->error = 1;
}
static bool fill_run_states(struct owl_token_run *run, struct fill_run_continuation *cont, uint16_t *failing_index);
static size_t build_parse_tree(struct owl_default_tokenizer *, struct owl_token_run *, struct owl_tree *);

static struct owl_tree *owl_tree_create_empty(void) {
    return calloc(1, sizeof(struct owl_tree));
}

static void free_token_runs(struct owl_token_run **run) {
    while (*run) {
        struct owl_token_run *prev = (*run)->prev;
        free(*run);
        *run = prev;
    }
}
static void parse_string(struct owl_tree *tree, const char *string) {
    tree->string = string;
    tree->next_offset = 1;
    struct owl_default_tokenizer tokenizer = {
        .text = string,
        .info = tree,
    };
    struct owl_token_run *token_run = 0;
    struct fill_run_continuation c = {
        .capacity = 8,
        .top_index = 0,
    };
    c.stack = calloc(c.capacity, sizeof(struct fill_run_state));
    c.stack[0].state = 0;
    c.stack[0].cont = &c;
    uint16_t failing_index = 0;
    while (owl_default_tokenizer_advance(&tokenizer, &token_run)) {
        if (!fill_run_states(token_run, &c, &failing_index)) {
            free(c.stack);
            tree->error = ERROR_UNEXPECTED_TOKEN;
            find_token_range(&tokenizer, token_run, failing_index, &tree->error_range.start, &tree->error_range.end);
            free_token_runs(&token_run);
            return;
        }
    }
    struct fill_run_state top = c.stack[c.top_index];
    free(c.stack);
    if (string[tokenizer.offset] != '\0') {
        tree->error = ERROR_INVALID_TOKEN;
        estimate_next_token_range(&tokenizer, &tree->error_range.start, &tree->error_range.end);
        free_token_runs(&token_run);
        return;
    }
    switch (top.state) {
    case 0:
    case 10:
    case 27:
    case 41:
    case 42:
    case 43:
        break;
    default:
        tree->error = ERROR_MORE_INPUT_NEEDED;
        find_end_range(&tokenizer, &tree->error_range.start, &tree->error_range.end);
        free_token_runs(&token_run);
        return;
    }
    tree->root_offset = build_parse_tree(&tokenizer, token_run, tree);
}
static struct owl_tree *owl_tree_create_with_error(enum owl_error e) {
    struct owl_tree *tree = owl_tree_create_empty();
    tree->error = e;
    return tree;
}
struct owl_tree *owl_tree_create_from_string(const char *string) {
    return owl_tree_create_with_options((struct owl_tree_options){ .string = string });
}
struct owl_tree *owl_tree_create_from_file(FILE *file) {
    if (!file)
        return owl_tree_create_with_error(ERROR_INVALID_FILE);
    return owl_tree_create_with_options((struct owl_tree_options){ .file = file });
}
struct owl_tree *owl_tree_create_with_options(struct owl_tree_options options) {
    if (!options.file == !options.string)
        return owl_tree_create_with_error(ERROR_INVALID_OPTIONS);
    if (options.file) {
        char *str = 0;
        size_t len = 32;
        size_t off = 0;
        while (true) {
            len = len * 3 / 2;
            char *s = realloc(str, len);
            if (!s) {
                free(str);
                return 0;
            }
            str = s;
            off += fread(str + off, 1, len - off, options.file);
            if (off < len) {
                str[off] = '\0';
                break;
            }
        }
        options.string = str;
    }
    struct owl_tree *tree = owl_tree_create_empty();
    if (options.file)
        tree->owns_string = true;
    parse_string(tree, options.string);
    return tree;
}
enum owl_error owl_tree_get_error(struct owl_tree *tree, struct source_range *error_range) {
    if (error_range)
        *error_range = tree->error_range;
    return tree->error;
}
void owl_tree_destroy(struct owl_tree *tree) {
    if (!tree)
        return;
    if (tree->owns_string)
        free((void *)tree->string);
    free(tree->parse_tree);
    free(tree);
}
static bool fill_run_states(struct owl_token_run *run, struct fill_run_continuation *cont, uint16_t *failing_index) {
    uint16_t token_index = 0;
    uint16_t number_of_tokens = run->number_of_tokens;
    while (token_index < number_of_tokens) {
        struct fill_run_state *top = &cont->stack[cont->top_index];
        run->states[token_index] = top->state;
        state_funcs[top->state](run, top, token_index);
        if (cont->error) {
            *failing_index = token_index - (cont->error > 0 ? 0 : 1);
            return false;
        }
        token_index++;
    }
    return true;
}
static const uint16_t actions[] = {
0,0,4096,0,4096,4096,0,4096,32768,12288,16384,0,4096,32768,12289,16384,0,4096,32768,12290,16384,0,4096,32768,12291,0,4096,32768,12292,0,
4096,32769,12288,0,4096,32769,12289,0,4096,32769,12290,16384,0,4096,32769,12291,16384,0,4096,32769,12292,16384,0,4096,32769,12293,16384,0,4096,32769,
12294,16385,0,4096,32770,16384,0,4096,32771,0,4096,32772,12288,32769,32768,0,4096,32772,12288,32769,32769,0,4096,32772,12289,32768,0,4096,32772,12290,
0,4096,32772,12290,32768,0,16384,0,32768,0,32768,12288,16384,0,32768,12289,16384,0,32768,12290,16384,0,32768,12291,0,32768,12292,0,32769,12288,
0,32769,12289,0,32769,12290,16384,0,32769,12291,16384,0,32769,12292,16384,0,32769,12293,16384,0,32769,12294,16385,0,32770,0,32770,16384,0,32771,
0,32772,12288,32769,32768,0,32772,12288,32769,32769,0,32772,12289,32768,0,32772,12290,0,32772,12290,32768,0,};
static const uint8_t action_table[256][2][7] = {
{{44,43,3,90,0,0,0,},{246,112,15,98,0,0,0,},},{{20,85,28,118,128,1,0,},},{{98,144,7,98,120,0,0,},},{{118,84,21,118,92,1,0,},},{{0}},{{90,60,5,110,104,0,0,},},
{{45,3,6,90,0,0,0,},},{{135,104,11,98,0,0,0,},},{{118,32,27,48,255,0,0,},},{{131,156,8,98,0,0,0,},},{{242,53,20,118,8,0,0,},},{{131,148,8,98,0,0,0,},},
{{89,36,5,110,204,1,0,},},{{0}},{{20,61,28,118,128,1,0,},},{{91,96,5,110,204,1,0,},},{{0}},{{44,175,3,90,0,0,0,},{173,148,14,98,0,0,0,},},{{98,120,27,135,152,0,0,},},
{{110,52,21,118,148,2,0,},},{{42,43,1,90,0,0,0,},},{{196,65,21,118,8,0,0,},},{{91,8,26,42,163,1,0,},},{{89,104,5,92,192,1,0,},},{{60,195,24,59,3,0,0,},
{18,175,0,90,0,0,0,},},{{118,60,21,118,92,1,0,},},{{246,152,15,98,0,0,0,},},{{136,148,12,98,0,0,0,},},{{0}},{{147,104,13,98,0,0,0,},},{{18,3,0,90,0,0,0,},},
{{92,140,7,98,216,1,0,},},{{44,171,3,90,0,0,0,},{90,104,5,92,88,0,0,},},{{136,104,12,98,0,0,0,},},{{48,31,16,47,3,0,0,},},{{98,140,7,98,120,0,0,},},
{{90,152,5,92,88,0,0,},},{{135,160,11,98,0,0,0,},},{{118,64,21,118,92,1,0,},},{{0}},{{89,148,5,92,192,1,0,},},{{89,112,5,92,192,1,0,},},{{147,112,13,98,0,0,0,},},
{{0}},{{0}},{{89,64,5,110,204,1,0,},},{{110,64,21,118,148,2,0,},},{{43,175,2,90,0,0,0,},},{{110,80,29,63,135,210,12,},},{{110,92,29,63,95,218,12,},},{{47,27,4,46,11,0,0,},
{89,60,5,110,204,1,0,},},{{135,152,11,98,0,0,0,},},{{92,104,7,98,216,1,0,},},{{89,12,26,43,179,1,0,},},{{43,43,2,90,0,0,0,},},{{0}},{{0}},{{135,112,11,98,0,0,0,},},
{{43,111,2,90,0,0,0,},},{{98,116,9,131,136,0,0,},},{{45,171,6,90,0,0,0,},{91,140,5,92,192,1,0,},},{{57,179,25,55,3,0,0,},{242,97,20,118,8,0,0,},},
{{56,179,23,55,3,0,0,},{242,101,20,118,8,0,0,},},{{43,3,2,90,0,0,0,},},{{89,252,63,89,0,100,1,},},{{89,144,5,92,192,1,0,},},{{98,104,7,98,120,0,0,},},
{{90,8,26,42,51,0,0,},},{{173,104,14,98,0,0,0,},},{{92,136,26,246,48,2,0,},},{{91,100,5,110,204,1,0,},},{{91,64,5,110,204,1,0,},},{{0}},{{136,144,12,98,0,0,0,},},
{{91,52,5,110,204,1,0,},},{{136,152,12,98,0,0,0,},},{{246,160,15,98,0,0,0,},},{{43,167,2,90,0,0,0,},},{{118,96,21,118,92,1,0,},},{{131,104,8,98,0,0,0,},},
{{0}},{{131,152,8,98,0,0,0,},},{{92,116,10,131,228,1,0,},},{{98,124,27,136,172,0,0,},},{{98,16,4,44,11,0,0,},},{{92,124,27,136,0,2,0,},},{{43,171,2,90,0,0,0,},},
{{246,148,15,98,0,0,0,},},{{135,148,11,98,0,0,0,},},{{42,167,1,90,0,0,0,},},{{196,53,21,118,8,0,0,},},{{0}},{{45,43,6,90,0,0,0,},},{{50,71,19,49,11,0,0,},
{91,104,5,92,192,1,0,},},{{90,112,5,92,88,0,0,},},{{98,156,7,98,120,0,0,},},{{110,32,27,48,75,2,0,},},{{63,207,24,62,3,0,0,},},{{91,148,5,92,192,1,0,},},
{{0}},{{92,120,27,135,240,1,0,},},{{89,96,5,110,204,1,0,},},{{89,140,5,92,192,1,0,},},{{89,4,26,18,147,1,0,},},{{20,101,28,118,128,1,0,},},{{0}},{{90,12,26,43,71,0,0,},},
{{196,61,21,118,8,0,0,},},{{242,37,20,118,8,0,0,},},{{91,4,26,18,147,1,0,},},{{246,104,15,98,0,0,0,},},{{246,140,15,98,0,0,0,},},{{18,43,0,90,0,0,0,},},
{{131,144,8,98,0,0,0,},},{{0}},{{91,144,5,92,192,1,0,},},{{196,97,21,118,8,0,0,},},{{92,116,9,131,228,1,0,},},{{54,91,19,53,19,0,0,},},{{118,100,21,118,92,1,0,},},
{{90,4,26,18,31,0,0,},},{{0}},{{91,252,63,89,4,100,1,},},{{61,183,22,56,3,0,0,},{90,36,5,110,104,0,0,},},{{147,140,13,98,0,0,0,},},{{98,148,7,98,120,0,0,},},
{{131,160,8,98,0,0,0,},},{{91,160,5,92,192,1,0,},},{{46,23,26,45,131,1,0,},{89,52,5,110,204,1,0,},},{{44,111,3,90,0,0,0,},},{{90,160,5,92,88,0,0,},},
{{0}},{{135,156,11,98,0,0,0,},},{{136,160,12,98,0,0,0,},},{{92,160,7,98,216,1,0,},},{{173,140,14,98,0,0,0,},},{{246,144,15,98,0,0,0,},},{{0}},{{92,112,7,98,216,1,0,},},
{{0}},{{98,116,10,131,136,0,0,},},{{91,36,5,110,204,1,0,},},{{42,3,1,90,0,0,0,},},{{0}},{{59,191,27,58,131,1,0,},{118,92,29,63,27,217,12,},},{{20,97,28,118,128,1,0,},},
{{92,128,27,147,16,2,0,},},{{42,175,1,90,0,0,0,},},{{118,56,17,20,13,1,0,},},{{42,111,1,90,0,0,0,},},{{98,152,7,98,120,0,0,},},{{90,252,63,89,8,100,1,},},
{{91,60,5,110,204,1,0,},},{{173,156,14,98,0,0,0,},},{{62,203,27,61,131,1,0,},{90,64,5,110,104,0,0,},},{{96,66,18,118,8,0,0,},},{{89,100,5,110,204,1,0,},},
{{45,111,6,90,0,0,0,},{96,98,18,118,8,0,0,},},{{0}},{{90,148,5,92,88,0,0,},},{{147,156,13,98,0,0,0,},},{{135,144,11,98,0,0,0,},},{{147,148,13,98,0,0,0,},},
{{118,52,29,63,111,17,7,},},{{0}},{{96,62,18,118,8,0,0,},},{{173,144,14,98,0,0,0,},},{{118,36,21,118,92,1,0,},},{{18,111,0,90,0,0,0,},},{{96,86,18,118,8,0,0,},},
{{44,3,3,90,0,0,0,},{131,112,8,98,0,0,0,},},{{42,171,1,90,0,0,0,},},{{89,8,26,42,163,1,0,},},{{196,37,21,118,8,0,0,},},{{118,92,30,60,51,217,12,},},
{{110,36,21,118,148,2,0,},},{{91,156,5,92,192,1,0,},},{{90,140,5,92,88,0,0,},},{{173,112,14,98,0,0,0,},},{{0}},{{92,132,27,173,32,2,0,},},{{89,160,5,92,192,1,0,},},
{{0}},{{90,52,5,110,104,0,0,},},{{0}},{{147,152,13,98,0,0,0,},},{{96,102,18,118,8,0,0,},},{{58,187,22,57,3,0,0,},{110,84,21,118,148,2,0,},},{{196,85,21,118,8,0,0,},},
{{131,140,8,98,0,0,0,},},{{136,140,12,98,0,0,0,},},{{110,56,17,20,85,2,0,},},{{110,92,30,60,115,218,12,},},{{110,60,21,118,148,2,0,},},{{92,144,7,98,216,1,0,},},
{{0}},{{52,79,19,51,11,0,0,},},{{0}},{{173,160,14,98,0,0,0,},},{{242,65,20,118,8,0,0,},},{{0}},{{91,152,5,92,192,1,0,},},{{18,167,0,90,0,0,0,},},{{118,52,21,118,92,1,0,},},
{{147,144,13,98,0,0,0,},},{{246,156,15,98,0,0,0,},},{{242,85,20,118,8,0,0,},},{{45,167,6,90,0,0,0,},},{{20,37,28,118,128,1,0,},},{{136,112,12,98,0,0,0,},},
{{55,175,63,55,3,100,1,},{90,96,5,110,104,0,0,},},{{91,112,5,92,192,1,0,},},{{0}},{{98,132,27,173,212,0,0,},},{{90,144,5,92,88,0,0,},},{{0}},{{89,84,5,110,204,1,0,},},
{{20,65,28,118,128,1,0,},},{{89,156,5,92,192,1,0,},},{{92,148,7,98,216,1,0,},},{{0}},{{196,101,21,118,8,0,0,},},{{135,140,11,98,0,0,0,},},{{147,160,13,98,0,0,0,},},
{{92,152,7,98,216,1,0,},},{{0}},{{53,47,29,63,139,129,9,},},{{0}},{{98,128,27,147,192,0,0,},},{{118,80,29,63,75,209,12,},},{{51,75,30,60,67,202,12,},},{{110,52,29,63,163,18,7,},},
{{173,152,14,98,0,0,0,},},{{110,100,21,118,148,2,0,},},{{96,38,18,118,8,0,0,},},{{90,100,5,110,104,0,0,},},{{98,112,7,98,120,0,0,},},{{45,175,6,90,0,0,0,},
{90,156,5,92,88,0,0,},},{{49,51,30,60,67,202,7,},{96,54,18,118,8,0,0,},},{{90,84,5,110,104,0,0,},},{{98,160,7,98,120,0,0,},},{{18,171,0,90,0,0,0,},},
{{91,84,5,110,204,1,0,},},{{44,167,3,90,0,0,0,},{89,152,5,92,192,1,0,},},{{20,53,28,118,128,1,0,},},{{0}},{{110,96,21,118,148,2,0,},},{{91,12,26,43,179,1,0,},},
{{242,61,20,118,8,0,0,},},{{92,156,7,98,216,1,0,},},{{136,156,12,98,0,0,0,},},{{98,136,26,246,232,0,0,},},{{0}},{{92,16,4,44,3,0,0,},},{{0}},{{0}},};

struct action_table_key {
    uint8_t bytes[3];
};
static inline struct action_table_key encode_key(uint32_t target_nfa_state, uint32_t dfa_state, uint32_t dfa_symbol) {
    struct action_table_key key = {{0}};
    key.bytes[0] |= (target_nfa_state >> 0) & 255;
    key.bytes[1] |= (target_nfa_state >> 8) & 3;
    key.bytes[1] |= (dfa_state << 2) & 255;
    key.bytes[2] |= (dfa_symbol >> 0) & 63;
    return key;
}
struct action_table_entry {
    uint32_t nfa_state;
    uint32_t actions;
    uint32_t push_nfa_state;
};
static struct action_table_entry decode_entry(const uint8_t *bytes) {
    struct action_table_entry entry = {0};
    entry.nfa_state |= ((uint32_t)bytes[3] & 255) << 0;
    entry.nfa_state |= ((uint32_t)bytes[4] & 3) << 8;
    entry.actions |= ((uint32_t)bytes[4] & 255) >> 2;
    entry.actions |= ((uint32_t)bytes[5] & 3) << 6;
    entry.push_nfa_state |= ((uint32_t)bytes[5] & 255) >> 2;
    entry.push_nfa_state |= ((uint32_t)bytes[6] & 15) << 6;
    return entry;
}
static struct action_table_entry action_table_lookup(uint32_t nfa_state, uint32_t dfa_state, uint32_t token) {
    uint32_t hash = ((((((0xe5aa55e5 ^ (nfa_state)) * 0xe5aa55e5) ^ (dfa_state)) * 0xe5aa55e5) ^ (token)) * 0xe5aa55e5);
    uint32_t index1 = hash & 255;
    uint32_t index2 = hash >> 24;
    struct action_table_key key = encode_key(nfa_state, dfa_state, token);
    uint32_t j = 0;
    const uint8_t *entry = 0;
    for (; j < 2; ++j) {
        entry = action_table[index1][j];
        if (!memcmp(key.bytes, entry, sizeof(key.bytes)))
            break;
        entry = action_table[index2][j];
        if (!memcmp(key.bytes, entry, sizeof(key.bytes)))
            break;
    }
    if (j >= 2)
        abort();
    return decode_entry(entry);
}
static void apply_actions(struct construct_state *state, uint32_t index, size_t start, size_t end) {
    size_t offset = end;
    uint32_t i;
    for (i = index; actions[i]; ++i) {
        if (((((actions[i]) >> 12) & 0xf) & 8))
            offset = start;
        construct_action_apply(state, actions[i], offset);
    }
}
static size_t build_parse_tree(struct owl_default_tokenizer *tokenizer, struct owl_token_run *run, struct owl_tree *tree) {
    struct construct_state construct_state = { .info = tree };
    uint32_t *state_stack = 0;
    uint32_t stack_depth = 0;
    size_t stack_capacity = 0;
    size_t whitespace = tokenizer->whitespace;
    size_t offset = tokenizer->offset - whitespace;
    construct_begin(&construct_state, offset, CONSTRUCT_NORMAL_ROOT);
    uint32_t nfa_state = 91;
    while (run) {
        uint16_t length_offset = run->lengths_size - 1;
        uint16_t n = run->number_of_tokens;
        uint16_t i;
        for (i = n - 1; i < n; i--) {
            size_t end = offset;
            size_t len = 0;
            struct action_table_entry entry = action_table_lookup(nfa_state, run->states[i], run->tokens[i]);
            if (run->tokens[i] < 29)
                len = decode_token_length(run, &length_offset, &offset);
            else {
                if (stack_depth >= stack_capacity) {
                    size_t new_capacity = (stack_capacity + 2) * 3 / 2;
                    if (new_capacity <= stack_capacity)
                        abort();
                    uint32_t *new_stack = realloc(state_stack, new_capacity * sizeof(uint32_t));
                    if (!new_stack)
                        abort();
                    state_stack = new_stack;
                    stack_capacity = new_capacity;
                }
                state_stack[stack_depth++] = entry.push_nfa_state;
            }
            apply_actions(&construct_state, entry.actions, end, end + whitespace);
            if (run->states[i] == 44) {
                if (stack_depth == 0)
                    abort();
                nfa_state = state_stack[--stack_depth];
            } else
                nfa_state = entry.nfa_state;
            whitespace = end - offset - len;
        }
        struct owl_token_run *old = run;
        run = run->prev;
        free(old);
    }
    struct action_table_entry entry = action_table_lookup(nfa_state, UINT32_MAX, UINT32_MAX);
    apply_actions(&construct_state, entry.actions, offset, offset + whitespace);
    free(state_stack);
    free_token_runs(&run);
    return construct_finish(&construct_state, offset);
}
static size_t read_whitespace(const char *text, void *info) {
    switch (text[0]) {
    case 32:
        return 1;
    case 9:
        return 1;
    case 10:
        return 1;
    case 13:
        return 1;
    default:
        return 0;
    }
}
static size_t read_keyword_token(uint32_t *token, bool *end_token, const char *text, void *info) {
    switch (text[0]) {
    case 40:
        *end_token = false;
        *token = 22;
        return 1;
    case 41:
        *end_token = true;
        *token = 24;
        return 1;
    case 44:
        *end_token = false;
        *token = 19;
        return 1;
    case 46:
        switch (text[1]) {
        case 98:
            if (text[2] == 111 && text[3] == 111 && text[4] == 108) {
                *end_token = false;
                *token = 8;
                return 5;
            } else {
                return 0;
            }
        case 99:
            if (text[2] == 111 && text[3] == 110 && text[4] == 115 && text[5] == 116 && text[6] == 97 && text[7] == 110 && text[8] == 116 && text[9] == 95 && text[10] == 112 && text[11] == 111 && text[12] == 111 && text[13] == 108) {
                *end_token = false;
                *token = 3;
                return 14;
            } else {
                return 0;
            }
        case 101:
            if (text[2] == 110 && text[3] == 116 && text[4] == 114 && text[5] == 121) {
                *end_token = false;
                *token = 2;
                return 6;
            } else {
                return 0;
            }
        case 102:
            if (text[2] == 117 && text[3] == 110 && text[4] == 99) {
                *end_token = false;
                *token = 6;
                return 5;
            } else {
                return 0;
            }
        case 105:
            switch (text[2]) {
            case 110:
                switch (text[3]) {
                case 116:
                    switch (text[4]) {
                    case 49:
                        if (text[5] == 54) {
                            *end_token = false;
                            *token = 12;
                            return 6;
                        } else {
                            return 0;
                        }
                    case 51:
                        if (text[5] == 50) {
                            *end_token = false;
                            *token = 13;
                            return 6;
                        } else {
                            return 0;
                        }
                    case 54:
                        if (text[5] == 52) {
                            *end_token = false;
                            *token = 14;
                            return 6;
                        } else {
                            return 0;
                        }
                    case 56:
                        *end_token = false;
                        *token = 11;
                        return 5;
                    default:
                        return 0;
                    }
                default:
                    return 0;
                }
            default:
                return 0;
            }
        case 109:
            if (text[2] == 111 && text[3] == 100 && text[4] == 117 && text[5] == 108 && text[6] == 101) {
                *end_token = false;
                *token = 0;
                return 7;
            } else {
                return 0;
            }
        case 110:
            if (text[2] == 111 && text[3] == 110 && text[4] == 101) {
                *end_token = false;
                *token = 7;
                return 5;
            } else {
                return 0;
            }
        case 114:
            if (text[2] == 101 && text[3] == 103 && text[4] == 105 && text[5] == 115 && text[6] == 116 && text[7] == 101 && text[8] == 114 && text[9] == 115) {
                *end_token = false;
                *token = 16;
                return 10;
            } else {
                return 0;
            }
        case 115:
            if (text[2] == 116 && text[3] == 114) {
                *end_token = false;
                *token = 15;
                return 4;
            } else {
                return 0;
            }
        case 118:
            if (text[2] == 101 && text[3] == 114 && text[4] == 115 && text[5] == 105 && text[6] == 111 && text[7] == 110) {
                *end_token = false;
                *token = 1;
                return 8;
            } else {
                return 0;
            }
        default:
            return 0;
        }
    case 47:
        if (text[1] == 47) {
            *end_token = false;
            *token = 4294967295U;
            return 2;
        } else {
            return 0;
        }
    case 58:
        *end_token = false;
        *token = 17;
        return 1;
    case 67:
        *end_token = false;
        *token = 25;
        return 1;
    case 82:
        *end_token = false;
        *token = 23;
        return 1;
    case 99:
        if (text[1] == 97 && text[2] == 108 && text[3] == 108) {
            *end_token = false;
            *token = 20;
            return 4;
        } else {
            return 0;
        }
    case 102:
        if (text[1] == 97 && text[2] == 108 && text[3] == 115 && text[4] == 101) {
            *end_token = false;
            *token = 10;
            return 5;
        } else {
            return 0;
        }
    case 109:
        if (text[1] == 111 && text[2] == 118) {
            *end_token = false;
            *token = 18;
            return 3;
        } else {
            return 0;
        }
    case 114:
        if (text[1] == 101 && text[2] == 116) {
            *end_token = false;
            *token = 21;
            return 3;
        } else {
            return 0;
        }
    case 116:
        if (text[1] == 114 && text[2] == 117 && text[3] == 101) {
            *end_token = false;
            *token = 9;
            return 4;
        } else {
            return 0;
        }
    case 123:
        *end_token = false;
        *token = 4;
        return 1;
    case 125:
        *end_token = false;
        *token = 5;
        return 1;
    default:
        return 0;
    }
}
static uint32_t rule_lookup(uint32_t parent, uint32_t slot, void *context) {
    switch (parent) {
    case 0:
        switch (slot) {
        case 0: return 1;
        default: break;
        }
        break;
    case 1:
        switch (slot) {
        case 0: return 9;
        case 1: return 2;
        case 2: return 3;
        case 3: return 4;
        case 4: return 5;
        default: break;
        }
        break;
    case 2:
        switch (slot) {
        case 0: return 10;
        case 1: return 9;
        default: break;
        }
        break;
    case 3:
        switch (slot) {
        case 0: return 10;
        default: break;
        }
        break;
    case 4:
        switch (slot) {
        case 0: return 11;
        default: break;
        }
        break;
    case 5:
        switch (slot) {
        case 0: return 7;
        case 1: return 6;
        case 2: return 8;
        default: break;
        }
        break;
    case 6:
        switch (slot) {
        case 0: return 7;
        case 1: return 8;
        default: break;
        }
        break;
    case 7:
        switch (slot) {
        case 0: return 10;
        default: break;
        }
        break;
    case 8:
        switch (slot) {
        case 0: return 10;
        default: break;
        }
        break;
    default: break;
    }
    return UINT32_MAX;
}
static void fixity_associativity_precedence_lookup(int *fixity_associativity, int *precedence, uint32_t rule, uint32_t choice, void *context) {
    switch (rule) {
    default: return;
    }
}
static size_t number_of_slots_lookup(uint32_t rule, void *context) {
    switch (rule) {
    case 0: return 1;
    case 1: return 5;
    case 2: return 2;
    case 3: return 1;
    case 4: return 1;
    case 5: return 3;
    case 6: return 2;
    case 7: return 1;
    case 8: return 1;
    case 9: return 0;
    case 10: return 0;
    case 11: return 0;
    default: return 0;
    }
}
static void left_right_operand_slots_lookup(uint32_t rule, uint32_t *left, uint32_t *right, uint32_t *operand, void *context) {
    switch (rule) {
    case 0:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 1:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 2:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 3:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 4:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 5:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 6:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 7:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 8:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 9:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 10:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 11:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    }
}
#endif

